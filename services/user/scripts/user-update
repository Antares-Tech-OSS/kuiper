#!/usr/bin/env node

require('app-module-path').addPath(__dirname + '/../../../');

var fs           = require ('fs');
var os           = require ('os');
var promise      = require ('bluebird');
var minimist     = require ('minimist');
var mongoose     = require ('mongoose');
var pretty       = require ('prettyjson');
var colors       = require ('colors');
var sprintf      = require ('sprintf');
var yaml         = require ('js-yaml');
var safeJsonStr  = require ('safe-json-stringify');
var db           = require ('../../common/lib/db');
var users        = require ('../models/profile');
var admin        = require ('../models/admin');
var roles        = require ('../models/roles');

var argv = minimist (process.argv.slice(2));

function usage () {
	var file = process.argv[1].replace (/^.*\/([^\/]+$)/, "$1");

	console.log ('Usage : ' + file + ' options');
	console.log ('       --user       (MANDATORY)  : user id in id:auth_via format');
	console.log ('       --role       (OPTIONAL)   : role name (in quotes if multi-word, case sensitive)');
	
	process.exit (1);
}

if (!argv.user)
	usage ();

function print_error (e) {
	if (e instanceof Error)
		console.error (`${colors.red('!error ')} :`, e);
	else if (typeof e === 'object')
		console.error (`${colors.red('!error ')} :`, safeJsonStr(e));
	else
		console.error (`${colors.red('!error ')} :`, e);
}

async function get_role (_user) {
	var p = promise.pending();

	try {
		var _role = await roles.getByName (argv.role)

		if (!_role)
			return p.reject ('no such role');

		p.resolve (_role._id);
	}
	catch (e) {
		p.reject (e);
	}

	return p.promise;
}

async function main () {
	try {

		db.init ('mongodb://localhost:27017/user?maxPoolSize=10');
		db.emitter.on ('db-connected', async function () {
			try {
				var query = {};
				var _user = await users.info_id (argv.user);

				if (argv.role)
					query.roleId = await get_role (_user);

				if (Object.keys (query).length === 0) {
					console.log ('nothing to update');
					process.exit (0);
				}

				query.modifiedBy = _user.id;
				var result = await admin.edit (_user.id, query);

				console.log (pretty.render(result));
				console.log ('\ndone.');
				process.exit (0);
			}
			catch (e) {
				print_error (e);

				if (e.name === 'ERRDUPLICATE')
					console.log (colors.red ('\nConfucius say') + ' : use option ' + colors.green('--overwrite') + ' to overwrite this role');

				process.exit (1);
			}
		});
	}
	catch (e) {
		print_error (e);
		process.exit (1);
	}
}

main ();
