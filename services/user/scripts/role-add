#!/usr/bin/env node

require('app-module-path').addPath(__dirname + '/../../../');

var fs           = require ('fs');
var os           = require ('os');
var promise      = require ('bluebird');
var minimist     = require ('minimist');
var pretty       = require ('prettyjson');
var colors       = require ('colors');
var sprintf      = require ('sprintf');
var yaml         = require ('js-yaml');
var safeJsonStr  = require ('safe-json-stringify');
var db           = require ('../../common/lib/db');
var users        = require ('../models/profile');
var roles        = require ('../models/roles');

var argv = minimist (process.argv.slice(2));
/*
 * Default values
 */
var variable_map = {
	protocol : 'https',
	port     : 443,
	user     : os.userInfo().username
};

function usage () {
	var file = process.argv[1].replace (/^.*\/([^\/]+$)/, "$1");

	console.log ('Usage : ' + file + ' options');
	console.log ('       --profile    (MANDATORY)  : path of the template file (./templates/<something>/yml)');
	console.log ('       --user       (MANDATORY)  : user id in id:auth_via format');
	console.log ('       --overwrite  (MANDATORY)  : overwrite existing record');
	
	process.exit (1);
}

if (!argv.profile || !argv.user)
	usage ();

function print_error (e) {
	if (e instanceof Error)
		console.error (`${colors.red('!error ')} :`, e);
	else if (typeof e === 'object')
		console.error (`${colors.red('!error ')} :`, safeJsonStr(e));
	else
		console.error (`${colors.red('!error ')} :`, e);
}

async function main () {
	try {

		var data = yaml.safeLoad(fs.readFileSync(argv.profile, 'utf8'));

		db.init ('mongodb://localhost:27017/user?maxPoolSize=10');
		db.emitter.on ('db-connected', async function () {
			try {
				await users.info_id (argv.user);
				data.createdBy = argv.user;

				if (!argv.overwrite)
					await roles.add (data);
				else {
					var role = await roles.getByName (data.name);
					if (!role)
						throw 'no such role';

					data._id = role._id;
					var updated = await roles.edit (role.id, data);
					console.log (pretty.render (updated.toObject ()));
				}

				console.log ('\ndone.');
				process.exit (0);
			}
			catch (e) {
				print_error (e);

				if (e.name === 'ERRDUPLICATE')
					console.log (colors.red ('\nConfucius say') + ' : use option ' + colors.green('--overwrite') + ' to overwrite this role');

				process.exit (1);
			}
		});
	}
	catch (e) {
		print_error (e);
		process.exit (1);
	}
}

main ();
