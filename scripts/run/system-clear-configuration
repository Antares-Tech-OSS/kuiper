#!/usr/bin/env node

const mongo   = require ('mongodb').MongoClient;
var promise   = require ('bluebird');
var stringify = require ('safe-json-stringify');
var fs        = require ('fs');
var os        = require ('os');
var colors    = require ('colors');
var moment    = require ('moment');
var pretty    = require ('prettyjson');
var minimist  = require ('minimist');
var cache     = require ('./helper-scripts/cache');

var args      = minimist (process.argv.slice(2));
var url_base  = 'mongodb://localhost:27017';

function usage () {
	console.log (`Usage : ${colors.green(process.argv[1].replace(/^.*\//g, ''))} options`);
	console.log ();
	console.log ( '    options:');
	console.log ( '      --yeah       (OPTIONAL)  : will actually delete things');
	console.log ( '      --list       (OPTIONAL)  : lists what will be deleted and exits');
	console.log ();

	process.exit (1);
}

var deletion_list = [
	{
		db          : 'auth',
		drop_db     : true,
	},
	{
		/* Auth App's DB */
		db          : 'heimdallr',
		drop_db     : true,
	},
];

function print_list () {
	deletion_list.forEach (function (el) {
		if (el.drop_db)
			console.log (`${colors.red ('drop db')}         : ${el.db}`);
		else {
			el.collections.forEach (function (coll) {
				console.log (`${colors.red ('drop collection')} : ${el.db} -> ${coll}`);
			});
		}
	});

	process.exit (0);
}

async function delete_all () {
	var p      = promise.pending ();
	var count  = deletion_list.length;
	var client = await mongo.connect (url_base);

	for (var i = 0; i < deletion_list.length; i++) {

		var el = deletion_list [i];

		try {

			var db = client.db (el.db);

			if (el.drop_db) {
				await db.dropDatabase ();
				console.log (`${colors.red('dropped db -> ')}${el.db}`);
			}
			else {
				if (!el.collections) {
					console.log (colors.red ('no collections specified for ') + el.db);
					return;
				}

				for (j = 0; j < el.collections.length; j++) {
					var coll = el.collections [j];

					try {
						if (db.collection (coll)) {
							await db.dropCollection (coll);
							console.log (`${colors.red('dropped collection -> ')}${el.db}/${coll}`);
						}
					}
					catch (err) {
						console.log (colors.red ('error dropping collection') + ` ${el.db}/${coll} :`, err);
					}
				};
			}
		}
		catch (err) {
			console.log (colors.red ('error connecting or dropping db') + ` ${el.db} :`, err);
		}

		count--;
		if (!count)
			p.resolve ();
	};

	return p.promise;
}

async function main () {

	if (args.list)
		return print_list ();

	else if (args.yeah) {
		try {
			var _cache = new cache ();
			await delete_all ();
			_cache._flush_all ();
			console.log (colors.red ('cache flushed'))
		}
		catch (e) {
			console.log ();
			console.log (colors.red ('  !error'), e);
		}
	}
	else
		usage ();

	process.exit (0);
}

main ();
