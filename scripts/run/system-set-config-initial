#!/usr/bin/env node

var fs           = require ('fs');
var os           = require ('os');
var promise      = require ('bluebird');
var minimist     = require ('minimist');
var colors       = require ('colors');
var traverse     = require ('traverse');
var sprintf      = require ('sprintf');
var yaml         = require ('js-yaml');
var rest         = require ('./helper-scripts/rest');
var script       = require ('./helper-scripts/run-script');

var argv = minimist (process.argv.slice(2));
/*
 * Default values
 */
var variable_map = {
	protocol : 'https',
	port     : 443,
	user     : os.userInfo().username
};

function usage () {
	var file = process.argv[1].replace (/^.*\/([^\/]+$)/, "$1");

	console.log ('Usage : ' + file + ' --profile path [ options ]');
	
	process.exit (1);
}

if (!argv.profile)
	usage ();

var regex = new RegExp (/@[a-zA-Z0-9_]+/g);
function write (...args) { process.stdout.write (...args); }

function fill_variable_map () {
	Object.keys(argv).forEach(function (key) {
		var val = argv[key];
		variable_map [key] = val;
	});
}

async function main () {
	try {

		fill_variable_map ();
		var data = yaml.safeLoad(fs.readFileSync(argv.profile, 'utf8'));
		var main = data.main;

		var json = parse (data);

		for (var i = 0; i < main.length; i++) {

			var section = main[i];
			var jobs    = section.jobs;

			write (`${colors.yellow('section')} ${section.section}\n`);

			for (var job_no = 0; job_no < jobs.length; job_no++) {

				try {
					var job = jobs [job_no];

					write (`    ${colors.yellow('job')} ${job.name} ...`);
					await exec_job (job);
					write (`${colors.green('ok')}\n`);

				}
				catch (err) {
					write (`${colors.red('failed\n  !damn :')} `);
					console.log (err);
				}
			}
		}
	}
	catch (e) {
		console.error (`${colors.red('!error ')} :`, e);
		process.exit (1);
	}
}

async function exec_job (job) {
	var p = promise.pending ();

	try {

		switch (job.action) {
			case 'post':
				var response = await rest.postJson (job.url, job.data);
				p.resolve ();
				break;

			case 'put':
				var response = await rest.putJson (job.url, job.data);
				p.resolve ();
				break;

			case 'run-script':
				var response = await script.run (job, argv);
				p.resolve ();
				break;

			default :
				p.reject (`unrecognized action "${job.action}"`);
		}
	}
	catch (e) {
		p.reject (e);
	}

	return p.promise;
}

function parse (data) {
	traverse (data).forEach (function (val) {

		if (!this.isLeaf)
			return;

		if (argv.debug)
			console.log (`key = ${this.key}, val = ${val}`);

		if (typeof val !== 'string')
			return;

		var matches = val.match(regex);

		/*
		 * If this value does not contain any variable, ignore
		 */
		if (!matches || !matches.length)
			return;

		for (var i = 0; i < matches.length; i++) {
			var variable = matches[i].replace (/^@/g, '');

			if (!variable_map [ variable ])
				throw `variable ${matches[i]} not defined. try adding --${variable} on the command line`;

			val = val.replace (matches[i], variable_map [variable]);
			this.update (val);
		}
	});
}

main ();
